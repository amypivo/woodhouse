{"tagline":"An AMQP-based background worker system for Ruby.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Woodhouse\r\n\r\nAn AMQP-based background worker system for Ruby 1.8 and 1.9 designed to make managing heterogenous tasks relatively easy.\r\n\r\nThe use case for Woodhouse is for reliable and sane performance in situations where jobs on a single queue may vary significantly\r\nin length. The goal is to permit large numbers of quick jobs to be serviced even when many slow jobs are in the queue. A secondary\r\ngoal is to provide a sane way for jobs on a given queue to be given special priority or dispatched to a server more suited to them.\r\n\r\n## Usage\r\n\r\nWoodhouse is currently being developed. It is not production-ready, and is liable to change significantly at any time. Caveat emptor.\r\n\r\nUsage examples are forthcoming. Some configuration is required for Rails 2, but Rails 3 should work out of the box by just adding Woodhouse\r\nto your Gemfile.\r\n\r\n## Features (current)\r\n\r\n* Configurable worker sets per server\r\n* Configurable number of threads per worker\r\n* Segmenting a single queue among multiple workers based on job characteristics (using AMQP header exchanges)\r\n\r\n## Features (planned)\r\n\r\n* Live reconfiguration of workers -- add or remove workers across one or more nodes without restarting\r\n* Persistent configuration changes -- configuration changes saved to a data store and kept across deploys\r\n* Watchdog/status workers on every node\r\n* Web interface\r\n\r\n## To Do\r\n\r\n* Examples and guides\r\n* More documentation\r\n* Watchdog system\r\n\r\n## Acknowledgements\r\n\r\nWoodhouse originated in a substantially modified version of the Workling background worker system, and still retains some code\r\nand structure from that project.\r\n\r\nThis library was developed for [CrowdCompass](http://crowdcompass.com) and was released as open source with their permission.","google":"","name":"Woodhouse"}